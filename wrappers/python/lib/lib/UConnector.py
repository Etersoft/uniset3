# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _UConnector
else:
    import _UConnector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _UConnector.Params_max

    def __init__(self):
        _UConnector.Params_swiginit(self, _UConnector.new_Params())

    def add(self, s):
        return _UConnector.Params_add(self, s)

    def add_str(self, s):
        return _UConnector.Params_add_str(self, s)
    argc = property(_UConnector.Params_argc_get, _UConnector.Params_argc_set)
    argv = property(_UConnector.Params_argv_get, _UConnector.Params_argv_set)

    @staticmethod
    def inst():
        return _UConnector.Params_inst()
    __swig_destroy__ = _UConnector.delete_Params

# Register Params in _UConnector:
_UConnector.Params_swigregister(Params)
cvar = _UConnector.cvar
DefaultID = cvar.DefaultID
DefaultSupplerID = cvar.DefaultSupplerID

class ShortIOInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_UConnector.ShortIOInfo_value_get, _UConnector.ShortIOInfo_value_set)
    tv_sec = property(_UConnector.ShortIOInfo_tv_sec_get, _UConnector.ShortIOInfo_tv_sec_set)
    tv_nsec = property(_UConnector.ShortIOInfo_tv_nsec_get, _UConnector.ShortIOInfo_tv_nsec_set)
    supplier = property(_UConnector.ShortIOInfo_supplier_get, _UConnector.ShortIOInfo_supplier_set)
    supplier_node = property(_UConnector.ShortIOInfo_supplier_node_get, _UConnector.ShortIOInfo_supplier_node_set)

    def __init__(self):
        _UConnector.ShortIOInfo_swiginit(self, _UConnector.new_ShortIOInfo())
    __swig_destroy__ = _UConnector.delete_ShortIOInfo

# Register ShortIOInfo in _UConnector:
_UConnector.ShortIOInfo_swigregister(ShortIOInfo)
class UConnector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _UConnector.UConnector_swiginit(self, _UConnector.new_UConnector(*args))
    __swig_destroy__ = _UConnector.delete_UConnector

    def getUIType(self):
        return _UConnector.UConnector_getUIType(self)

    def getConfFileName(self):
        return _UConnector.UConnector_getConfFileName(self)

    def getValue(self, id, node):
        return _UConnector.UConnector_getValue(self, id, node)

    def setValue(self, *args):
        return _UConnector.UConnector_setValue(self, *args)

    def getTimeChange(self, *args):
        return _UConnector.UConnector_getTimeChange(self, *args)

    def getSensorID(self, name):
        return _UConnector.UConnector_getSensorID(self, name)

    def getNodeID(self, name):
        return _UConnector.UConnector_getNodeID(self, name)

    def getObjectID(self, name):
        return _UConnector.UConnector_getObjectID(self, name)

    def getShortName(self, id):
        return _UConnector.UConnector_getShortName(self, id)

    def getName(self, id):
        return _UConnector.UConnector_getName(self, id)

    def getTextName(self, id):
        return _UConnector.UConnector_getTextName(self, id)

    def getObjectInfo(self, *args):
        return _UConnector.UConnector_getObjectInfo(self, *args)

    def apiRequest(self, *args):
        return _UConnector.UConnector_apiRequest(self, *args)

    def activate_objects(self):
        return _UConnector.UConnector_activate_objects(self)

# Register UConnector in _UConnector:
_UConnector.UConnector_swigregister(UConnector)

