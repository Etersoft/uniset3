syntax = "proto3";

package uniset3;

option optimize_for = LITE_RUNTIME;
// ---------------------------------------------------------------------------
import "UniSetTypes.proto";
import "MessageTypes.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
// ---------------------------------------------------------------------------
enum ErrorCode {
    
    errOK = 0;
    errNameNotFound = 1; /*!< Датчик не найден */
    errIOBadParam = 2;
    errUndefined = 3;  /*!< Значение не определено (например: обрыв датчика) */
}

message UndefinedDetails
{
   int64 sid = 1;
   int64 value = 2;
}


/*! Информация о датчике */
message SensorInfo
{
    int64 id = 1;    /*!< идентификатор датчика */
    int64 node = 2;  /*!< узел на котором он находится */
}

message GetValueParams
{
   int64 id = 1;
}

message GetRawValueParams
{
   int64 id = 1;
}

message SetValueParams {
    int64 id = 1;
    int64 value = 2;
    int64 sup_id = 3;
}

message FreezeValueParams {
    int64 id = 1;
    bool set = 2;
    int64 value = 3;
    int64 sup_id = 4;
}

message GetIOTypeParams
{
    int64 id = 1;
}

message CalibrateParams
{
    int64 id = 1;
    CalibrateInfo ci = 2;
    int64 adminId = 3;
}

message GetCalibrateInfoParams
{
    int64 id = 1;
}

message RetIOType
{
    uniset3.IOType type = 1;
}


// --- Интерфейс получения информации о всех датчиках ---
/*! Информация датчике */
message SensorIOInfo
{
    int64 value = 1;                   /*!< значение */
    bool blocked = 2;                  /*!< данное значение блокировано другим */
    bool frozen = 3;                   /*!< данное значение "заморожено" */
    int64 real_value = 4;              /*!< запомненное состояние, до блокировки или заморозки */
    uniset3.IOType type = 5;     /*!< тиNewStub(oref)п */
    int32 priority = 6;                /*!< приоритет уведомления */
    SensorInfo si = 7;
    int64 default_val = 8;             /*!< значение по умолчанию */
    CalibrateInfo ci = 9;              /*!< калибровочные параметры */
    Timespec ts = 10;     /*!< время последнего изменения датчика (clock_gettime(CLOCK_REALTIME) */
    int64 supplier = 11;    /*!< идентификатор объекта изменившего состояние датчика */
    bool dbignore = 12;     /*!< не сохранять изменения в БД */
    int64 depend_sid = 13;  /*!< датчик от которого зависит данный (при blocked=true). DefaultObjectId если не зависит */
}

message SensorIOInfoSeq
{
    repeated SensorIOInfo sensors = 1;
}

/*! Информация о "выходе" */
message OutInfo
{
    SensorInfo si = 1;    /*!< идентификатор выхода */
    int64 value = 2;      /*!< значение */
}

message OutSeq
{
    repeated OutInfo sensors = 1;
}

message SetOutputParams
{
    int64 id = 1;  // service Id
    OutSeq lst = 2;
    int64 supplier = 3;
}

/*! Информация о датчике */
message ShortIOInfo
{
    int64 value = 1;
    Timespec ts = 2;     /*!< время последнего изменения датчика (clock_gettime(CLOCK_REALTIME) */
    int64 supplier = 3;  /*!< идентификатор того, кто менял датчик (последний раз) */
}

message ShortMap
{
    uniset3.IOType type = 1;
    int64 value = 2;
    int64 id = 3;
}

message ShortMapSeq
{
    repeated ShortMap sensors = 1;
}

message GetSensorsMapParams
{
    int64 id = 1; // servcice Id
}

message GetSensorIOInfoParams
{
    int64 id = 1;
}

message GetSensorSeqParams
{
    int64 id = 1; // servcice Id
    uniset3.IDSeq seq = 2;
}

message GetTimeChangeParams
{
    int64 id = 1;
}

message GetSensorsParams
{
    int64 id = 1; // servcice Id
}

// ---------------------------------------------------------------------------
/*! 
 * \interface IOController_i 
 * \brief Базовый интерфейс для создания контролеров ввода/вывода  
 */ 
service IOController_i {
    rpc getValue(GetValueParams) returns(google.protobuf.Int64Value) {}
    rpc setValue(SetValueParams) returns(google.protobuf.Empty) {}
    rpc freezeValue(FreezeValueParams) returns(google.protobuf.Empty) {}
    rpc getIOType(GetIOTypeParams) returns(RetIOType) {}
    
    /*! Получени неколиброванного значения */
    rpc getRawValue(GetRawValueParams) returns(google.protobuf.Int64Value) {}
    
    // --- Интерфейс получения информации о всех датчиках ---
    rpc calibrate(CalibrateParams) returns(google.protobuf.Empty) {}
    rpc getCalibrateInfo(GetCalibrateInfoParams) returns(CalibrateInfo) {}
    
    rpc getSensorsMap(GetSensorsMapParams) returns(SensorIOInfoSeq) {}
    rpc getSensorIOInfo(GetSensorIOInfoParams) returns(SensorIOInfo) {}
    
    // -- Функции работы со списком датчиков --
    
    /*! Получение состояния датчиков. */
    rpc getSensorSeq(GetSensorSeqParams) returns(SensorIOInfoSeq) {}
    
    /*!
        Выставить состояние группы датчиков/выходов (дискретных или аналоговых).
        \return Возвращает список входов/выходов изменить состояние которых не удалось.
            Будет пустым если всё хорошо.
    */
    rpc setOutputSeq(SetOutputParams) returns(uniset3.IDSeq) {}

    rpc getTimeChange(GetTimeChangeParams) returns(ShortIOInfo) {}
    rpc getSensors(GetSensorsParams) returns(ShortMapSeq){}
}
// ---------------------------------------------------------------------------
message AskParams
{
    int64 sid = 1;
    uniset3.ConsumerInfo ci = 2;
    uniset3.UIOCommand cmd = 3;
}

message AskSeqParams
{
    int64 id = 1; // servcice Id
    uniset3.IDSeq ids = 2;
    uniset3.ConsumerInfo ci = 3;
    uniset3.UIOCommand cmd = 4;
}


/*!
 * \interface IONotifyController_i
 * \brief Базовый интерфейс для создания процессов рассылающих сообщения об изменении состояния
*/
service IONotifyController_i
{
    /*! Закакз уведомления об изменении датчика */
    rpc askSensor(AskParams) returns(google.protobuf.Empty){}

    /*!
        Заказ сразу списка объектов.
        \return Возвращает список объектов заказ по котором не прошёл.
            Будет пустым если всё хорошо.
    */
    rpc askSensorsSeq(AskSeqParams) returns(uniset3.IDSeq) {}
}


message SensorValue
{
    int64 id = 1;
    int64 val = 2;
};

message SensorsStreamCmd
{
    uniset3.UIOCommand cmd = 1;
    repeated SensorValue slist = 2;
    optional uniset3.ConsumerInfo ci = 3;
}

/*!
 * \interface IONotifyStreamController_i
 * \brief Базовый интерфейс для рассылки уведомлений (через stream)
*/
service IONotifyStreamController_i
{
    rpc sensorsStream(stream SensorsStreamCmd) returns(stream uniset3.umessage.SensorMessage) {}
}
